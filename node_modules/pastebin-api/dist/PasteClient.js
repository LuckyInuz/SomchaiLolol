"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const fast_xml_parser_1 = __importDefault(require("fast-xml-parser"));
class PasteClient {
    constructor(apiKey) {
        this.pasteBinUrl = "https://pastebin.com/api/api_post.php";
        this.loginUrl = "https://pastebin.com/api/api_login.php";
        if (typeof apiKey !== "string" || !apiKey) {
            throw Error("`apiKey` must be a string!");
        }
        this.apiKey = apiKey;
    }
    /**
     * Creates the paste
     * @param {Options} options The options for the paste
     * @returns {Promise<string>} The URL of the created paste
     * @see [https://pastebin.com/doc_api#2](https://pastebin.com/doc_api#2)
     */
    createPaste(options) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            if (options.name && options.name.length > 100) {
                throw Error("Name of paste cannot be longer than 100 characters");
            }
            const res = yield node_fetch_1.default(this.pasteBinUrl, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: this.encode({
                    api_dev_key: this.apiKey,
                    api_option: "paste",
                    api_paste_name: (_a = options.name) !== null && _a !== void 0 ? _a : "Untitled",
                    api_paste_code: options.code,
                    api_paste_format: (_b = options.format) !== null && _b !== void 0 ? _b : "javascript",
                    api_paste_private: (_c = options.publicity) !== null && _c !== void 0 ? _c : 0,
                    api_paste_expire_date: (_d = options.expireDate) !== null && _d !== void 0 ? _d : "N",
                    api_user_key: (_e = options.apiUserKey) !== null && _e !== void 0 ? _e : "",
                }),
            });
            const url = yield res.text();
            if (url.toLowerCase().startsWith("bad api request")) {
                throw Error(url);
            }
            return url;
        });
    }
    /**
     * Get a limit of 1000 pastes from the logged in user
     * @param {GetPastesOptions} options
     * @returns An array of all the user's pastes
     * @see [https://pastebin.com/doc_api#10](https://pastebin.com/doc_api#10)
     */
    getPastesByUser(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (options.limit) {
                if (options.limit < 1 || options.limit > 1000) {
                    throw Error("Limit cannot be lower than 1 or higher than 1000");
                }
            }
            if (!options.userKey) {
                throw Error("'userKey' must be provided (PasteClient#getPastesByUser)");
            }
            const res = yield node_fetch_1.default(this.pasteBinUrl, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: this.encode({
                    api_dev_key: this.apiKey,
                    api_user_key: options.userKey,
                    api_results_limit: options.limit,
                    api_option: "list",
                }),
            });
            const data = yield res.text();
            if (data.toLowerCase().startsWith("bad api request")) {
                throw Error(data);
            }
            // If no pastes are found simply return an empty array
            if (data.toLowerCase().startsWith("no pastes found")) {
                return [];
            }
            const parsed = fast_xml_parser_1.default.parse(data);
            // It can either return an array or an object
            if (typeof ((_a = parsed["paste"]) === null || _a === void 0 ? void 0 : _a.sort) !== "undefined") {
                return parsed["paste"];
            }
            else {
                return [parsed["paste"]];
            }
        });
    }
    /**
     * Delete a paste by it's key
     * @param {DeletePasteOptions} options
     * @returns {boolean} Whether it was deleted or not
     * @see [https://pastebin.com/doc_api#11](https://pastebin.com/doc_api#11)
     */
    deletePasteByKey(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options.userKey) {
                throw Error("'userKey' must be provided (PasteClient#deletePasteByKey)");
            }
            if (!options.pasteKey) {
                throw Error("'pasteKey' must be provided (PasteClient#deletePasteByKey)");
            }
            const res = yield node_fetch_1.default(this.pasteBinUrl, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: this.encode({
                    api_dev_key: this.apiKey,
                    api_option: "delete",
                    api_paste_key: options.pasteKey,
                    api_user_key: options.userKey,
                }),
            });
            const data = yield res.text();
            if (data.toLowerCase().startsWith("bad api request")) {
                throw Error(data);
            }
            // Paste was successfully removed
            return data.toLowerCase().startsWith("paste removed");
        });
    }
    /**
     * Login to get access to more API routes
     * @param {string} name The user's name
     * @param {string} password The user's password
     * @returns The user token to use for other API routes
     * @see [https://pastebin.com/doc_api#9](https://pastebin.com/doc_api#9)
     */
    login(name, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield node_fetch_1.default(this.loginUrl, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: this.encode({
                    api_dev_key: this.apiKey,
                    api_user_name: name,
                    api_user_password: password,
                }),
            });
            const data = yield res.text();
            if (data.toLowerCase().startsWith("bad api request")) {
                throw Error(data);
            }
            return data;
        });
    }
    /**
     * Encodes data to valid URI
     * @param data The data you want to encode
     */
    encode(data) {
        let string = "";
        for (const [key, value] of Object.entries(data)) {
            if (!value)
                continue;
            string += `&${encodeURIComponent(key)}=${encodeURIComponent(`${value}`)}`;
        }
        return string.substring(1);
    }
}
exports.default = PasteClient;
//# sourceMappingURL=PasteClient.js.map